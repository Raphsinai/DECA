MOV R0, #12     // set R0 as op1 to 12
MOV R1, #5      // set R1 as op2 to 5
MOV R2, #0      // set R2 as sum to 0
MOV R3, R1      // set R3 as op2_shifted to R1
MOV R0, R0      // change FlagZ according to R0
JEQ 8           // if R0 = 0 then skip the loop instructions
MOV R1, R0      // set now unused R1 to R0
AND R1, #1      // AND R1 (= R0) with 1 and change FlagZ
JEQ 2           // if R0 & 1 is 0 then skip addition and jump to shifts
ADD R2, R2, R3  // add op2_shifted to sum
LSL R3, R3, #1  // shift op2_shifted to the left by one as going up in significance we have to multiply by 2
LSR R0, R0, #1  // shift op1 to the right by 1 as we are increasing in significance so we want to get the next bit as the LSB
JMP -8          // jump back to check if op1 = 0 and restart the loop
